// scripts/deploy.js
const hre = require("hardhat");
const fs = require("fs");
const path = require("path");

/**
 * Main deployment function
 * Deploys the EVoting contract and saves contract info to frontend
 */
async function main() {
  console.log("🚀 Starting EVoting contract deployment...\n");

  // Get the contract factory
  const EVoting = await hre.ethers.getContractFactory("EVoting");
  
  // Deploy the contract
  console.log("📝 Deploying EVoting contract...");
  const evoting = await EVoting.deploy();
  
  // Wait for deployment to complete (ethers v6 syntax)
  await evoting.waitForDeployment();
  
  // Get the deployed contract address
  const contractAddress = await evoting.getAddress();
  
  console.log("✅ EVoting contract deployed successfully!");
  console.log(`📍 Contract Address: ${contractAddress}`);
  
  // Get deployment information
  const [deployer] = await hre.ethers.getSigners();
  console.log(`👤 Deployed by (Admin): ${deployer.address}`);
  console.log(`💰 Deployer balance: ${hre.ethers.formatEther(await hre.ethers.provider.getBalance(deployer.address))} ETH\n`);
  
  // Verify initial state
  console.log("📊 Initial Contract State:");
  console.log(`   Admin: ${await evoting.admin()}`);
  console.log(`   Election Running: ${await evoting.electionRunning()}`);
  console.log(`   Candidate Count: ${await evoting.candidateCount()}\n`);
  
  // Display default candidates
  console.log("👥 Default Candidates:");
  const candidateCount = await evoting.candidateCount();
  for (let i = 1; i <= candidateCount; i++) {
    const candidate = await evoting.candidates(i);
    console.log(`   ${i}. ${candidate.name} - Votes: ${candidate.voteCount}`);
  }
  
  // Save contract address and ABI to frontend
  console.log("\n📁 Saving contract info to frontend...");
  
  const frontendDir = path.join(__dirname, "..", "frontend", "src", "ethereum");
  
  // Create directory if it doesn't exist
  if (!fs.existsSync(frontendDir)) {
    fs.mkdirSync(frontendDir, { recursive: true });
  }
  
  // Read ABI from artifacts
  const artifactPath = path.join(__dirname, "..", "artifacts", "contracts", "EVoting.sol", "EVoting.json");
  const artifact = JSON.parse(fs.readFileSync(artifactPath, "utf8"));
  
  // Create contract info file
  const contractInfo = {
    address: contractAddress,
    abi: artifact.abi
  };
  
  // Write to config.js
  const configContent = `// Auto-generated by deployment script
export const CONTRACT_ADDRESS = "${contractAddress}";
export const CONTRACT_ABI = ${JSON.stringify(artifact.abi, null, 2)};
`;
  
  fs.writeFileSync(
    path.join(frontendDir, "config.js"),
    configContent
  );
  
  console.log("✅ Contract info saved to frontend/src/ethereum/config.js");
  
  console.log("\n" + "=".repeat(60));
  console.log("🎉 Deployment Complete!");
  console.log("=".repeat(60));
  console.log("\n💡 Next Steps:");
  console.log("   1. Start the frontend:");
  console.log("      cd frontend && npm start");
  console.log("   2. Connect MetaMask to localhost:8545");
  console.log("   3. Import the admin account to MetaMask:");
  console.log(`      Address: ${deployer.address}`);
  console.log("   4. Use Hardhat's default test accounts for voters");
  console.log("\n📝 Important Information:");
  console.log(`   CONTRACT_ADDRESS: ${contractAddress}`);
  console.log(`   ADMIN_ADDRESS: ${deployer.address}`);
  console.log(`   NETWORK: localhost (127.0.0.1:8545)`);
  console.log(`   CHAIN_ID: 31337\n`);
}

// Execute deployment
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("❌ Deployment failed:", error);
    process.exit(1);
  });